<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Copyright (C) 2011 David Thomas Hume <dth@dthu.me>

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<article xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">

  <info>
    <title>Usage</title>

    <pubdate>2012-05-07</pubdate>

    <abstract>
      <para>
        An overview of how to use the extra enforcer rules
      </para>
    </abstract>
  </info>
  
  <para>
    To use any of the extra enforcer rules, you must first add the project
    as a dependency of the enforcer plugin, as detailed in <link
    xlink:href="http://maven.apache.org/enforcer/enforcer-api/writing-a-custom-rule.html"
    >Writing a custom rule</link>:
  </para>
  
  <example>
    <title>Adding the dependency to the enforcer plugin.</title>
    <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <dependencies>
          <dependency>
            <groupId>]]><?eval ${project.groupId}?><![CDATA[</groupId>
            <artifactId>]]><?eval ${project.artifactId}?><![CDATA[</artifactId>
            <version>]]><?eval ${project.version}?><![CDATA[</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
  </example>

  <section>
    <title>The Script Rule</title>
    <para>
      The <code
      xlink:href="./apidocs/org/dthume/maven/enforcer/ScriptRule.html"
      >ScriptRule</code> is capable of evaluating a script via any
      <link
      xlink:href="http://en.wikipedia.org/wiki/Scripting_for_the_Java_Platform"
      >JSR223</link> compliant <code
      xlink:href="http://docs.oracle.com/javase/6/docs/api/javax/script/ScriptEngine.html"
      >ScriptEngine</code>.
      
      Note, however, that the rule uses the <link
      xlink:href="http://commons.apache.org/bsf/">Bean Scripting
      Framework</link> version 3+ in order to support deployment to JDK 1.5
      environments.

      If you are running in a JRE prior to version 6, or wish to use a
      scripting language other than JavaScript, then you will first need to
      add an appropriate scripting engine dependency, such as <link
      xlink:href="http://groovy.codehaus.org">Groovy</link>
      to the enforcer plugin.
    </para>

    <example>
      <title>Adding Groovy as a dependency to the enforcer plugin.</title>
      <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>1.8.6</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
    </example>
    
    <para>
      With an appropriate scripting language available, the rule can then be
      configured to execute scripts as follows:
    </para>

    <example>
      <title>Configuring an inline <code>ScriptRule</code>.</title>
      <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <configuration>
          <rules>
            <scriptRule implementation="org.dthume.maven.enforcer.ScriptRule">
              <language>javascript</language>
              <!-- Always pass -->
              <script>1 === 1</script>
            </scriptRule>
          </rules>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
    </example>

    <example>
      <title>Configuring a <code>ScriptRule</code> with a file.</title>
      <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <configuration>
          <rules>
            <scriptRule implementation="org.dthume.maven.enforcer.ScriptRule">
              <language>javascript</language>
              <scriptFile>src/main/script/script.js</scriptFile>
            </scriptRule>
          </rules>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
    </example>

    <example>
      <title>Setting a custom  failure message.</title>
      <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <configuration>
          <rules>
            <scriptRule implementation="org.dthume.maven.enforcer.ScriptRule">
              <language>javascript</language>
              <!-- always fail -->
              <script>false;</script>
              <message>Custom failure message</message>
            </scriptRule>
          </rules>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
    </example>

    <example>
      <title>Getting access to the <code>EnforcerRuleHelper</code>.</title>
      <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <configuration>
          <rules>
            <scriptRule implementation="org.dthume.maven.enforcer.ScriptRule">
              <language>javascript</language>
              <ruleHelperKey>helper</ruleHelperKey>
              <script>helper.evaluate("${someExpression}");</script>
            </scriptRule>
          </rules>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
    </example>

    <example>
      <title>Specifying custom script bindings.</title>
      <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <configuration>
          <rules>
            <scriptRule implementation="org.dthume.maven.enforcer.ScriptRule">
              <language>javascript</language>
              <script>binding1 === binding2</script>
              <scriptBindings>
                <binding1>${someExpression}</binding1>
                <binding2>literal value</binding2>
              </scriptBindings>
            </scriptRule>
          </rules>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
    </example>

    <section>
      <title>Script Rule Caching</title>
      <para>
        The <code
        xlink:href="http://maven.apache.org/enforcer/enforcer-api/index.html"
        >enforcer-api</code> provides hooks to support caching of rules, thus
        avoiding the cost of evaluating the same rule multiple times in a
        single build (for example during forked executions). By default
        <code>ScriptRule</code> instances are <emphasis>not</emphasis> cached;
        support for caching is provided on a per-rule basis via three
        properties: one of <code>validatorScript</code> or
        <code>validatorScriptFile</code> and (optionally)
        <code>validationContextKey</code>.
      </para>
      <para>
        The <code>validatorScript</code> and <code>validatorScriptFile</code>
        properties allow authors to specify a script which will be run to
        validate previous rule execution results. When one of these properties
        is specified then the <code>validationContextKey</code> property will
        be available (defaulting to <code>ruleContext</code>), allowing the
        configuration of a key which will be used to bind a
        <code
        xlink:href="http://docs.oracle.com/javase/6/docs/api/java/util/Map.html"
        >Map</code> instance during execution of both the rule script and
        the validation script. This context map can be used by the initial
        rule script to store any results which should be inspected by the
        validator script to indicate if the previous cached result is still
        valid. If the validation script evaluates to <code>true</code> via the
        <code
        xlink:href="./apidocs/org/dthume/maven/enforcer/ScriptResultEvaluator.html"
        >ScriptResultEvaluator</code> then the cached result will be
        used, otherwise the initial script will be re-executed. Any configured
        <code>scriptBindings</code>, as well as the <code>RuleHelper</code>,
        are available inside both the rule script and the validation script.
      </para>
      
      <note>
        <para>
          If the validator script evaluates to <code>false</code>, then a
          new validation context map will be used when the initial rule
          script is re-executed. The initial script should thus
          <emphasis>always</emphasis> assume that it will be working with
          an empty validation context. 
        </para>
      </note>
      
      <example>
        <title>Using an inline validator rule.</title>
        <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <configuration>
          <rules>
            <scriptRule implementation="org.dthume.maven.enforcer.ScriptRule">
              <language>javascript</language>
              <!-- Trivial example of passing context objects -->
              <script>
                ruleContext.put("foo", 1);
                true;
              </script>
              <validatorScript>
                1 == ruleContext.get("foo");
              </validatorScript>
            </scriptRule>
          </rules>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
      </example>
      
      <example>
        <title>Using an inline validator rule with a custom key.</title>
        <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <configuration>
          <rules>
            <scriptRule implementation="org.dthume.maven.enforcer.ScriptRule">
              <language>javascript</language>
              <!-- Same as above, but with custom key -->
              <validationContextKey>vContext</validationContextKey>
              <script>
                vContext.put("foo", 1);
                true;
              </script>
              <validatorScript>
                1 == vContext.get("foo");
              </validatorScript>
            </scriptRule>
          </rules>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
      </example>
      
      <para>
        Obviously, if you have no context to store and simply wish to avoid
        evaluating a rule twice, then you can specify a
        <code>validatorScript</code> which evaluates to <code>true</code>:
      </para>

      <example>
        <title>Simple rule caching.</title>
        <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <configuration>
          <rules>
            <scriptRule implementation="org.dthume.maven.enforcer.ScriptRule">
              <language>javascript</language>
              <scriptFile>src/script/someValidatorScript.js</scriptFile>
              <validatorScript>true;</validatorScript>
            </scriptRule>
          </rules>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
      </example>
    </section>

    <section>
      <title>Script Result Evaluation</title>
      <para>
        Both initial and validator scripts are expected to return some
        object representing the success or failure of the script.
        
        This object is then, itself, normalized into a <code>boolean</code>
        value (in order to support languages that do not directly support
        <code>Boolean</code> types).
        
        The normalization process is strategised via the <code
        xlink:href="./apidocs/org/dthume/maven/enforcer/ScriptResultEvaluator.html"
        >ScriptResultEvaluator</code> interface, whose default implementation
        (<code
        xlink:href="./apidocs/org/dthume/maven/enforcer/DefaultScriptResultEvaluator.html"
        >DefaultScriptResultEvaluator</code>)
        follows (most of) the same rules as JavaScript in determining
        "<link
        xlink:href="http://james.padolsey.com/javascript/truthy-falsey/"
        >truthiness</link>," specifically:
      </para>
      <itemizedlist>
        <listitem>
          <para><code>null</code> is <code>false</code></para>
        </listitem>
        <listitem>
          <para>
            <code>java.lang.Boolean</code> objects are returned as is.
          </para>
        </listitem>        
        <listitem>
          <para>
            <code>java.lang.Number</code> objects are <code>false</code> if
            they are zero, otherwise <code>true</code>.
          </para>
        </listitem>
        <listitem>
          <para>All other objects are <code>true</code></para>
        </listitem>
      </itemizedlist>
      <para>
        Note that, unlike JavaScript, the empty string is <code>true</code>.
      </para>
      <para>
        While it is anticipated that this will cover most circumstances, a
        custom evaluator can be used by specifying the
        <code>resultEvaluator</code> property:
      </para>
      <example>
        <title>Using a custom <code>ScriptRuleEvaluator</code>.</title>
        <programlisting language="xml"
><![CDATA[<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>]]><?eval ${enforcerPluginVersion}?><![CDATA[</version>
        <configuration>
          <rules>
            <scriptRule implementation="org.dthume.maven.enforcer.ScriptRule">
              <language>javascript</language>
              <scriptFile>src/script/someValidatorScript.js</scriptFile>
              <resultEvaluator implementation="com.example.CustomEvaluator" />
            </scriptRule>
          </rules>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>com.example</groupId>
            <artifactId>custom-script-evaluator</artifactId>
            <version>1.0</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
      </example>      
    </section>
  </section>
</article>
